#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
TIMEOUT=${TIMEOUT:-60}
VERBOSE=${VERBOSE:-0}

print_colored() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

show_help() {
    cat << EOF
üîÑ Aztec Sync Check - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–¥

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    ./run_sync_check.sh [OPTIONS]

–û–ü–¶–ò–ò:
    --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    
–ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:
    TIMEOUT=60      –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)
    VERBOSE=1       –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

–ü–†–ò–ú–ï–†–´:
    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    ./run_sync_check.sh
    
    # –° –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    VERBOSE=1 ./run_sync_check.sh
    
    # –° —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    TIMEOUT=120 ./run_sync_check.sh

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    - Inventory —Ñ–∞–π–ª: ../common/inventory/hosts
    - SSH –∫–ª—é—á: ../common/ssh/id_rsa
    - –°–µ—Ä–≤–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ install playbook

–†–ï–ó–£–õ–¨–¢–ê–¢–´:
    - –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: ./sync_results.csv
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö/–Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    - –°–ø–∏—Å–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–æ–¥
EOF
    exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --help|-h)
            show_help
            ;;
        *)
            print_colored $RED "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
done

print_colored $BLUE "üîÑ Aztec Sync Check - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–æ–¥"
echo "=================================================="

# Check if we're in the right directory
if [[ ! -f "sync_check.yml" ]]; then
    print_colored $RED "‚ùå –§–∞–π–ª sync_check.yml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
    echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ get_proof_playbook"
    exit 1
fi

# Check inventory file
INVENTORY_FILE="../common/inventory/hosts"
if [[ ! -f "$INVENTORY_FILE" ]]; then
    print_colored $RED "‚ùå Inventory —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $INVENTORY_FILE"
    echo ""
    print_colored $YELLOW "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inventory —Ñ–∞–π–ª–∞:"
    echo "  cd ../install_playbook"
    echo "  ./run_01_prepare.sh path/to/your/servers.csv"
    exit 1
fi

# Check SSH key
SSH_KEY="../common/ssh/id_rsa"
if [[ ! -f "$SSH_KEY" ]]; then
    print_colored $RED "‚ùå SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSH_KEY"
    echo "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ install playbook"
    exit 1
fi

# Set SSH key permissions
chmod 600 "$SSH_KEY" 2>/dev/null || true

# Count servers
SERVER_COUNT=$(grep -E '^\s*[0-9]+\.' "$INVENTORY_FILE" | wc -l | tr -d ' ')
print_colored $GREEN "‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ inventory: $SERVER_COUNT"
print_colored $BLUE "üìã Inventory —Ñ–∞–π–ª: $INVENTORY_FILE"
print_colored $BLUE "üîë SSH –∫–ª—é—á: $SSH_KEY"
print_colored $BLUE "‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: ${TIMEOUT} —Å–µ–∫—É–Ω–¥"

# Set verbose mode
if [[ "$VERBOSE" == "1" ]]; then
    print_colored $YELLOW "üîç –í–∫–ª—é—á–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º (VERBOSE=1)"
    ANSIBLE_VERBOSITY="-v"
else
    ANSIBLE_VERBOSITY=""
fi

echo ""
print_colored $GREEN "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏..."
echo ""

# Run ansible playbook
START_TIME=$(date +%s)

# Set environment variables for Ansible
export ANSIBLE_HOST_KEY_CHECKING=False
export ANSIBLE_SSH_RETRIES=3
export ANSIBLE_TIMEOUT=30

if ansible-playbook $ANSIBLE_VERBOSITY \
    -i "$INVENTORY_FILE" \
    --private-key="$SSH_KEY" \
    --extra-vars "sync_timeout=$TIMEOUT" \
    sync_check.yml; then
    
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    echo ""
    print_colored $GREEN "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    print_colored $BLUE "‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $DURATION —Å–µ–∫—É–Ω–¥"
    
    if [[ -f "sync_results.csv" ]]; then
        print_colored $BLUE "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: sync_results.csv"
        echo ""
        
        # Show quick stats
        TOTAL_LINES=$(wc -l < sync_results.csv)
        TOTAL_SERVERS=$((TOTAL_LINES - 1))
        SYNCED_COUNT=$(grep -c ",SYNCED," sync_results.csv 2>/dev/null || echo 0)
        
        if [[ $TOTAL_SERVERS -gt 0 ]]; then
            SUCCESS_RATE=$((SYNCED_COUNT * 100 / TOTAL_SERVERS))
            print_colored $GREEN "üìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
            echo "   –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: $TOTAL_SERVERS"
            echo "   –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: $SYNCED_COUNT"
            echo "   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $SUCCESS_RATE%"
        fi
    fi
    
else
    print_colored $RED "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
    exit 1
fi 
